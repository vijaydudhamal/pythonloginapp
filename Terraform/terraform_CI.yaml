trigger:
  branches:
    include:
      - main

pool:
  name: 'agentpool'

variables:
  TF_VERSION: '1.8.5'
  WORKING_DIR: 'Terraform'

stages:

# ============================================================
# Stage 1: Terraform INIT + VALIDATE
# ============================================================
- stage: Init_Validate
  displayName: 'Terraform Init & Validate'
  jobs:
  - job: InitValidate
    displayName: 'Terraform Init and Validate'
    steps:
    - checkout: self

    # Install Terraform
    - script: |
        curl -LO https://releases.hashicorp.com/terraform/$(TF_VERSION)/terraform_$(TF_VERSION)_linux_amd64.zip
        unzip terraform_$(TF_VERSION)_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
        terraform -version
      displayName: 'Install Terraform CLI'

    # Terraform Init
    - task: AzureCLI@2
      displayName: 'Terraform Init'
      inputs:
        azureSubscription: 'terraform-service-connection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          cd $(WORKING_DIR)
          terraform init -input=false -reconfigure
      env:
        ARM_CLIENT_ID: $(servicePrincipalId)
        ARM_CLIENT_SECRET: $(servicePrincipalKey)
        ARM_TENANT_ID: $(tenantId)
        ARM_SUBSCRIPTION_ID: $(subscriptionId)

    # Terraform Validate
    - task: AzureCLI@2
      displayName: 'Terraform Validate'
      inputs:
        azureSubscription: 'terraform-service-connection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          cd $(WORKING_DIR)
          terraform validate
      env:
        ARM_CLIENT_ID: $(servicePrincipalId)
        ARM_CLIENT_SECRET: $(servicePrincipalKey)
        ARM_TENANT_ID: $(tenantId)
        ARM_SUBSCRIPTION_ID: $(subscriptionId)


# ============================================================
# Stage 2: Terraform PLAN
# ============================================================
- stage: Plan
  displayName: 'Terraform Plan'
  dependsOn: Init_Validate
  condition: succeeded()
  jobs:
  - job: Plan
    displayName: 'Terraform Plan'
    steps:
    - checkout: self

    - task: AzureCLI@2
      displayName: 'Terraform Plan'
      inputs:
        azureSubscription: 'terraform-service-connection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          cd $(WORKING_DIR)
          terraform plan -out=tfplan -input=false
      env:
        ARM_CLIENT_ID: $(servicePrincipalId)
        ARM_CLIENT_SECRET: $(servicePrincipalKey)
        ARM_TENANT_ID: $(tenantId)
        ARM_SUBSCRIPTION_ID: $(subscriptionId)

    - publish: $(WORKING_DIR)/tfplan
      artifact: terraform-plan


# ============================================================
# Stage 3: Terraform APPLY
# ============================================================
- stage: Apply
  displayName: 'Terraform Apply'
  dependsOn: Plan
  condition: succeeded()
  jobs:
  - job: Apply
    displayName: 'Terraform Apply'
    steps:
    - checkout: self
    - download: current
      artifact: terraform-plan

    - task: AzureCLI@2
      displayName: 'Terraform Apply'
      inputs:
        azureSubscription: 'terraform-service-connection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          cd $(WORKING_DIR)
          terraform apply -auto-approve tfplan
      env:
        ARM_CLIENT_ID: $(servicePrincipalId)
        ARM_CLIENT_SECRET: $(servicePrincipalKey)
        ARM_TENANT_ID: $(tenantId)
        ARM_SUBSCRIPTION_ID: $(subscriptionId)
